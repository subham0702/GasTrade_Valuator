# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mcvqRIQFHzJCFB432mnRWU5JX5ZvoY3a
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime as dt
from sklearn.linear_model import LinearRegression

natgas_df = pd.read_csv('/content/Nat_Gas.csv')
natgas_df

plt.plot(natgas_df['Dates'], natgas_df['Prices'])
plt.show()

natgas_df['Dates'] = pd.to_datetime(natgas_df['Dates'])
natgas_df['Months_Since_Start'] = (natgas_df['Dates'] - natgas_df['Dates'].min()) / np.timedelta64(1, 'D')/30
natgas_df

def linear_sine_model(x, a, b, c, d, e, f):
  return a * x + b + c + d * np.sin(2* np.pi * (e * x + f))

!pip install scipy
import scipy
from scipy.optimize import curve_fit

#Fitting the model
x_data = natgas_df['Months_Since_Start']
y_data = natgas_df['Prices']
params, params_covariance = curve_fit(linear_sine_model, x_data, y_data, p0 = [0.01, 10, 0, 1, 0.1, 0])

params

x_model = np.linspace(x_data.min(), x_data.max(), 300)
y_model = linear_sine_model(x_model, *params)

plt.figure(figsize=(10, 5))
plt.scatter(x_data, y_data, color='blue', label='Historical Data')
plt.plot(x_model, y_model, color='green', label='Improved Model Fit')
plt.title('Improved Gas Price Model Fit Vs Historical Data')
plt.xlabel('Months Since Start')
plt.ylabel('Gas Price ($)')
plt.legend()
plt.show()

def predict_gas_price(date):
  input_date= pd.to_datetime(date)

  if input_date in natgas_df['Dates'].values:
    return natgas_df.loc[natgas_df['Dates'] == input_date, 'Prices'].values[0]
  else:
    months_since_start = (input_date - natgas_df['Dates'].min()) / np.timedelta64(1, 'D')/30
    predicted_price = linear_sine_model(months_since_start, *params)
    return predicted_price


#TEST THE FUNCTION WITH DATE FROM HISTORICAL DATE AND A FUTURE DATE
test_date_historical = "11/1/23"
test_date_future = "6/23/25"

predict_gas_price(test_date_historical)
predict_gas_price(test_date_future)

#To calculate the value of the gas storage contract using predicted gas prices

def calculate_contract_value_model(injection_dates, withdrawal_dates, injection_rate, injection_withdrawal_costs, max_storage_volume, storage_cost_per_month):
  total_profit= 0
  avg_num_months= 30.42

  for i in range(len(injection_dates)):
    injection_price = predict_gas_price(injection_dates[i])
    print('injection_price:', injection_price)
    withdrawal_price = predict_gas_price(withdrawal_dates[i])
    print('withdrawal_price:', withdrawal_price)

    months_in_store = round((pd.to_datetime(withdrawal_dates[i]) - pd.to_datetime(injection_dates[i])).days / avg_num_months)
    print('months_in_store:', months_in_store)
    total_injected_volume = min(months_in_store * injection_rate, max_storage_volume)
    print('total_injected_volume:', total_injected_volume)

    cost_of_injection = total_injected_volume * injection_price - (total_injected_volume/1000000 * injection_withdrawal_costs)
    print('cost_of_injection:', cost_of_injection)
    revenue_from_sale = total_injected_volume * withdrawal_price - (total_injected_volume/1000000 * injection_withdrawal_costs)
    print('revenue_from_sale:', revenue_from_sale)
    total_storage_cost = months_in_store * storage_cost_per_month
    print('total_storage_cost:', total_storage_cost)

    total_profit += (revenue_from_sale - cost_of_injection - total_storage_cost)
    print('profit:', total_profit)
  return total_profit

#Sample parameter for testing
injection_dates = ['9/25/2024']
withdrawal_dates = ['12/31/2025']
injection_rate = 1000000    # MMBtu per month
injection_withdrawal_costs = 10000  # per MMBtu
max_storage_volume = 50000000   # MMBtu
storage_cost_per_month = 100000    # $ per MMBtu per month

calculate_contract_value_model(injection_dates, withdrawal_dates, injection_rate, injection_withdrawal_costs, max_storage_volume, storage_cost_per_month)